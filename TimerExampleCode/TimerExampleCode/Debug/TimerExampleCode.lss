
TimerExampleCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800134  00800134  00000baa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc5  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e2  00000000  00000000  000023e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a8  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_16>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ee       	ldi	r30, 0xE2	; 226
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 33       	cpi	r26, 0x34	; 52
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 e3       	ldi	r26, 0x34	; 52
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a7 39       	cpi	r26, 0x97	; 151
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 46 02 	call	0x48c	; 0x48c <main>
  a6:	0c 94 6f 05 	jmp	0xade	; 0xade <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f00c1>
  ba:	08 95       	ret

000000bc <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24

  if (c == '\a')
  c0:	87 30       	cpi	r24, 0x07	; 7
  c2:	69 f4       	brne	.+26     	; 0xde <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
  c4:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__iob+0x4>
  c8:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__iob+0x5>
  cc:	47 e0       	ldi	r20, 0x07	; 7
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <fwrite>
      return 0;
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <uart_putchar+0x38>
    }

  if (c == '\n')
  de:	8a 30       	cpi	r24, 0x0A	; 10
  e0:	19 f4       	brne	.+6      	; 0xe8 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
  e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
  ec:	85 ff       	sbrs	r24, 5
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <uart_putchar+0x2c>
  UDR0 = c;
  f0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>

  return 0;
}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 108:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <rxp.1827>
 10c:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <rxp.1827+0x1>
 110:	23 2b       	or	r18, r19
 112:	09 f0       	breq	.+2      	; 0x116 <uart_getchar+0x1a>
 114:	a3 c0       	rjmp	.+326    	; 0x25c <uart_getchar+0x160>
 116:	8c 01       	movw	r16, r24
 118:	c4 e3       	ldi	r28, 0x34	; 52
 11a:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 11c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 120:	99 23       	and	r25, r25
 122:	e4 f7       	brge	.-8      	; 0x11c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 124:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 128:	84 fd       	sbrc	r24, 4
 12a:	ab c0       	rjmp	.+342    	; 0x282 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 12c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 130:	83 fd       	sbrc	r24, 3
 132:	aa c0       	rjmp	.+340    	; 0x288 <uart_getchar+0x18c>
	  return _FDEV_ERR;
	c = UDR0;
 134:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 138:	8d 30       	cpi	r24, 0x0D	; 13
 13a:	09 f4       	brne	.+2      	; 0x13e <uart_getchar+0x42>
	  c = '\n';
 13c:	8a e0       	ldi	r24, 0x0A	; 10
	if (c == '\n')
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	59 f4       	brne	.+22     	; 0x158 <uart_getchar+0x5c>
	  {
	    *cp = c;
 142:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
 144:	b8 01       	movw	r22, r16
 146:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
	    rxp = b;
 14a:	84 e3       	ldi	r24, 0x34	; 52
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <rxp.1827+0x1>
 152:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rxp.1827>
	    break;
 156:	82 c0       	rjmp	.+260    	; 0x25c <uart_getchar+0x160>
	  }
	else if (c == '\t')
 158:	89 30       	cpi	r24, 0x09	; 9
 15a:	09 f4       	brne	.+2      	; 0x15e <uart_getchar+0x62>
	  c = ' ';
 15c:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 15e:	90 ee       	ldi	r25, 0xE0	; 224
 160:	98 0f       	add	r25, r24
 162:	9f 35       	cpi	r25, 0x5F	; 95
 164:	10 f0       	brcs	.+4      	; 0x16a <uart_getchar+0x6e>
 166:	80 3a       	cpi	r24, 0xA0	; 160
 168:	98 f0       	brcs	.+38     	; 0x190 <uart_getchar+0x94>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	c3 38       	cpi	r28, 0x83	; 131
 16e:	d9 07       	cpc	r29, r25
 170:	29 f4       	brne	.+10     	; 0x17c <uart_getchar+0x80>
	      uart_putchar('\a', stream);
 172:	b8 01       	movw	r22, r16
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
 17a:	d0 cf       	rjmp	.-96     	; 0x11c <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
 17c:	7e 01       	movw	r14, r28
 17e:	ef ef       	ldi	r30, 0xFF	; 255
 180:	ee 1a       	sub	r14, r30
 182:	fe 0a       	sbc	r15, r30
 184:	88 83       	st	Y, r24
		uart_putchar(c, stream);
 186:	b8 01       	movw	r22, r16
 188:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 18c:	e7 01       	movw	r28, r14
		uart_putchar(c, stream);
	      }
	    continue;
 18e:	c6 cf       	rjmp	.-116    	; 0x11c <uart_getchar+0x20>
	  }

	switch (c)
 190:	82 31       	cpi	r24, 0x12	; 18
 192:	19 f1       	breq	.+70     	; 0x1da <uart_getchar+0xde>
 194:	30 f4       	brcc	.+12     	; 0x1a2 <uart_getchar+0xa6>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	09 f4       	brne	.+2      	; 0x19c <uart_getchar+0xa0>
 19a:	79 c0       	rjmp	.+242    	; 0x28e <uart_getchar+0x192>
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	49 f0       	breq	.+18     	; 0x1b2 <uart_getchar+0xb6>
 1a0:	bd cf       	rjmp	.-134    	; 0x11c <uart_getchar+0x20>
 1a2:	87 31       	cpi	r24, 0x17	; 23
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <uart_getchar+0xac>
 1a6:	4e c0       	rjmp	.+156    	; 0x244 <uart_getchar+0x148>
 1a8:	8f 37       	cpi	r24, 0x7F	; 127
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <uart_getchar+0xb6>
 1ac:	85 31       	cpi	r24, 0x15	; 21
 1ae:	b9 f1       	breq	.+110    	; 0x21e <uart_getchar+0x122>
 1b0:	b5 cf       	rjmp	.-150    	; 0x11c <uart_getchar+0x20>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	c4 33       	cpi	r28, 0x34	; 52
 1b6:	df 07       	cpc	r29, r31
 1b8:	09 f0       	breq	.+2      	; 0x1bc <uart_getchar+0xc0>
 1ba:	08 f4       	brcc	.+2      	; 0x1be <uart_getchar+0xc2>
 1bc:	af cf       	rjmp	.-162    	; 0x11c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 1be:	b8 01       	movw	r22, r16
 1c0:	88 e0       	ldi	r24, 0x08	; 8
 1c2:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		uart_putchar(' ', stream);
 1c6:	b8 01       	movw	r22, r16
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		uart_putchar('\b', stream);
 1ce:	b8 01       	movw	r22, r16
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		cp--;
 1d6:	21 97       	sbiw	r28, 0x01	; 1
 1d8:	a1 cf       	rjmp	.-190    	; 0x11c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 1da:	b8 01       	movw	r22, r16
 1dc:	8d e0       	ldi	r24, 0x0D	; 13
 1de:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 1e2:	0f 2e       	mov	r0, r31
 1e4:	f4 e3       	ldi	r31, 0x34	; 52
 1e6:	ef 2e       	mov	r14, r31
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	ff 2e       	mov	r15, r31
 1ec:	f0 2d       	mov	r31, r0
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <uart_getchar+0x100>
	      uart_putchar(*cp2, stream);
 1f0:	b8 01       	movw	r22, r16
 1f2:	f7 01       	movw	r30, r14
 1f4:	81 91       	ld	r24, Z+
 1f6:	7f 01       	movw	r14, r30
 1f8:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 1fc:	ec 16       	cp	r14, r28
 1fe:	fd 06       	cpc	r15, r29
 200:	b8 f3       	brcs	.-18     	; 0x1f0 <uart_getchar+0xf4>
 202:	8c cf       	rjmp	.-232    	; 0x11c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 204:	b8 01       	movw	r22, r16
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		uart_putchar(' ', stream);
 20c:	b8 01       	movw	r22, r16
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		uart_putchar('\b', stream);
 214:	b8 01       	movw	r22, r16
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		cp--;
 21c:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	c4 33       	cpi	r28, 0x34	; 52
 222:	df 07       	cpc	r29, r31
 224:	09 f0       	breq	.+2      	; 0x228 <uart_getchar+0x12c>
 226:	70 f7       	brcc	.-36     	; 0x204 <uart_getchar+0x108>
 228:	79 cf       	rjmp	.-270    	; 0x11c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 22a:	b8 01       	movw	r22, r16
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		uart_putchar(' ', stream);
 232:	b8 01       	movw	r22, r16
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		uart_putchar('\b', stream);
 23a:	b8 01       	movw	r22, r16
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_putchar>
		cp--;
 242:	21 97       	sbiw	r28, 0x01	; 1
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	c4 33       	cpi	r28, 0x34	; 52
 248:	d8 07       	cpc	r29, r24
 24a:	09 f0       	breq	.+2      	; 0x24e <uart_getchar+0x152>
 24c:	08 f4       	brcc	.+2      	; 0x250 <uart_getchar+0x154>
 24e:	66 cf       	rjmp	.-308    	; 0x11c <uart_getchar+0x20>
 250:	fe 01       	movw	r30, r28
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	80 81       	ld	r24, Z
 256:	80 32       	cpi	r24, 0x20	; 32
 258:	41 f7       	brne	.-48     	; 0x22a <uart_getchar+0x12e>
 25a:	60 cf       	rjmp	.-320    	; 0x11c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 25c:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <rxp.1827>
 260:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <rxp.1827+0x1>
 264:	cf 01       	movw	r24, r30
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <rxp.1827+0x1>
 26c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rxp.1827>
 270:	80 81       	ld	r24, Z
  if (c == '\n')
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	21 f4       	brne	.+8      	; 0x27e <uart_getchar+0x182>
    rxp = 0;
 276:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <rxp.1827+0x1>
 27a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <rxp.1827>

  return c;
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 c0       	rjmp	.+16     	; 0x292 <uart_getchar+0x196>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 282:	8e ef       	ldi	r24, 0xFE	; 254
 284:	9f ef       	ldi	r25, 0xFF	; 255
 286:	05 c0       	rjmp	.+10     	; 0x292 <uart_getchar+0x196>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	02 c0       	rjmp	.+4      	; 0x292 <uart_getchar+0x196>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <__vector_16>:
void task1(void);
void task2(void);
void task3(void);

ISR(TIMER0_COMPA_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
	general_time++;
 2b2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <general_time>
 2b6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <general_time+0x1>
 2ba:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <general_time+0x2>
 2be:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <general_time+0x3>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <general_time>
 2cc:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <general_time+0x1>
 2d0:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <general_time+0x2>
 2d4:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <general_time+0x3>
	if (time1 > 1) --time1;
 2d8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <time1>
 2dc:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <time1+0x1>
 2e0:	02 97       	sbiw	r24, 0x02	; 2
 2e2:	48 f0       	brcs	.+18     	; 0x2f6 <__vector_16+0x56>
 2e4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <time1>
 2e8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <time1+0x1>
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <time1+0x1>
 2f2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <time1>
	if (time2 > 1) --time2;
 2f6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <time2>
 2fa:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <time2+0x1>
 2fe:	02 97       	sbiw	r24, 0x02	; 2
 300:	48 f0       	brcs	.+18     	; 0x314 <__vector_16+0x74>
 302:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <time2>
 306:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <time2+0x1>
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <time2+0x1>
 310:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <time2>
	if (time3 > 1) --time3;
 314:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <time3>
 318:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <time3+0x1>
 31c:	02 97       	sbiw	r24, 0x02	; 2
 31e:	48 f0       	brcs	.+18     	; 0x332 <__vector_16+0x92>
 320:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <time3>
 324:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <time3+0x1>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <time3+0x1>
 32e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <time3>
}
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <initialize>:
	}
}

void initialize(void)
{
	DDRB = 0x03;
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x03;
 348:	85 b9       	out	0x05, r24	; 5
	DDRD = 0x02;	// DDRD = (1 << PORTD1);	// uart and pin7 output
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x80;	// pull-up resistor
 34e:	90 e8       	ldi	r25, 0x80	; 128
 350:	9b b9       	out	0x0b, r25	; 11
	
	TIMSK0 = (1 << OCIE0A);
 352:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f006e>
	OCR0A = 71;
 356:	97 e4       	ldi	r25, 0x47	; 71
 358:	97 bd       	out	0x27, r25	; 39
	TCCR0A = (1 << WGM01);
 35a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 4;		// 0b00000100
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	85 bd       	out	0x25, r24	; 37
	
	time1 = t1 + 1;
 360:	85 ef       	ldi	r24, 0xF5	; 245
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <time1+0x1>
 368:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <time1>
	time2 = t2 + 1;
 36c:	8b ef       	ldi	r24, 0xFB	; 251
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <time2+0x1>
 374:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <time2>
	time3 = t3 + 1;
 378:	8d e3       	ldi	r24, 0x3D	; 61
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <time3+0x1>
 380:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <time3>
	
	flag = false;
 384:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <flag>
	
	uart_init();
 388:	0e 94 57 00 	call	0xae	; 0xae <uart_init>
	stdout = stdin = stderr = &uart_str;
 38c:	e1 e9       	ldi	r30, 0x91	; 145
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	95 83       	std	Z+5, r25	; 0x05
 396:	84 83       	std	Z+4, r24	; 0x04
 398:	91 83       	std	Z+1, r25	; 0x01
 39a:	80 83       	st	Z, r24
 39c:	93 83       	std	Z+3, r25	; 0x03
 39e:	82 83       	std	Z+2, r24	; 0x02
	fprintf(stdout, "Starting...\n");
 3a0:	9c 01       	movw	r18, r24
 3a2:	4c e0       	ldi	r20, 0x0C	; 12
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	86 e1       	ldi	r24, 0x16	; 22
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 73 02 	call	0x4e6	; 0x4e6 <fwrite>
	
	sei();
 3b2:	78 94       	sei
 3b4:	08 95       	ret

000003b6 <task1>:
}

void task1(void)
{
	time1 = t1 + 1; 
 3b6:	85 ef       	ldi	r24, 0xF5	; 245
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <time1+0x1>
 3be:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <time1>
	PORTB ^= 1;
 3c2:	95 b1       	in	r25, 0x05	; 5
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	89 27       	eor	r24, r25
 3c8:	85 b9       	out	0x05, r24	; 5
	fprintf(stdout, "t1:%lu\n", general_time);
 3ca:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <general_time>
 3ce:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <general_time+0x1>
 3d2:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <general_time+0x2>
 3d6:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <general_time+0x3>
 3da:	e1 e9       	ldi	r30, 0x91	; 145
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	22 81       	ldd	r18, Z+2	; 0x02
 3e0:	33 81       	ldd	r19, Z+3	; 0x03
 3e2:	bf 93       	push	r27
 3e4:	af 93       	push	r26
 3e6:	9f 93       	push	r25
 3e8:	8f 93       	push	r24
 3ea:	83 e2       	ldi	r24, 0x23	; 35
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	9f 93       	push	r25
 3f0:	8f 93       	push	r24
 3f2:	3f 93       	push	r19
 3f4:	2f 93       	push	r18
 3f6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <fprintf>
}
 3fa:	8d b7       	in	r24, 0x3d	; 61
 3fc:	9e b7       	in	r25, 0x3e	; 62
 3fe:	08 96       	adiw	r24, 0x08	; 8
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	9e bf       	out	0x3e, r25	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	8d bf       	out	0x3d, r24	; 61
 40a:	08 95       	ret

0000040c <task2>:

void task2(void)
{
	time2 = flag ? t2/2 + 1 : t2 + 1;
 40c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <flag>
 410:	88 23       	and	r24, r24
 412:	19 f0       	breq	.+6      	; 0x41a <task2+0xe>
 414:	8e e7       	ldi	r24, 0x7E	; 126
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <task2+0x12>
 41a:	8b ef       	ldi	r24, 0xFB	; 251
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <time2+0x1>
 422:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <time2>
	PORTB ^= 2;
 426:	95 b1       	in	r25, 0x05	; 5
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	89 27       	eor	r24, r25
 42c:	85 b9       	out	0x05, r24	; 5
	fprintf(stdout, "t2:%lu\n", general_time);
 42e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <general_time>
 432:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <general_time+0x1>
 436:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <general_time+0x2>
 43a:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <general_time+0x3>
 43e:	e1 e9       	ldi	r30, 0x91	; 145
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	22 81       	ldd	r18, Z+2	; 0x02
 444:	33 81       	ldd	r19, Z+3	; 0x03
 446:	bf 93       	push	r27
 448:	af 93       	push	r26
 44a:	9f 93       	push	r25
 44c:	8f 93       	push	r24
 44e:	8b e2       	ldi	r24, 0x2B	; 43
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	9f 93       	push	r25
 454:	8f 93       	push	r24
 456:	3f 93       	push	r19
 458:	2f 93       	push	r18
 45a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <fprintf>
}
 45e:	8d b7       	in	r24, 0x3d	; 61
 460:	9e b7       	in	r25, 0x3e	; 62
 462:	08 96       	adiw	r24, 0x08	; 8
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	9e bf       	out	0x3e, r25	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	8d bf       	out	0x3d, r24	; 61
 46e:	08 95       	ret

00000470 <task3>:

void task3(void)
{
	time3 = t3 + 1;
 470:	8d e3       	ldi	r24, 0x3D	; 61
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <time3+0x1>
 478:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <time3>
	flag = (~PIND & 0x80) ? true : false; //PD7 pin
 47c:	89 b1       	in	r24, 0x09	; 9
 47e:	80 95       	com	r24
 480:	88 1f       	adc	r24, r24
 482:	88 27       	eor	r24, r24
 484:	88 1f       	adc	r24, r24
 486:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <flag>
 48a:	08 95       	ret

0000048c <main>:
	if (time3 > 1) --time3;
}

int main(void)
{
	initialize();
 48c:	0e 94 a2 01 	call	0x344	; 0x344 <initialize>
	while (1)
	{
		if (1 == time1) task1();
 490:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <time1>
 494:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <time1+0x1>
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	11 f4       	brne	.+4      	; 0x4a0 <main+0x14>
 49c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <task1>
		if (1 == time2) task2();
 4a0:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <time2>
 4a4:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <time2+0x1>
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <main+0x24>
 4ac:	0e 94 06 02 	call	0x40c	; 0x40c <task2>
		if (1 == time3) task3();
 4b0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <time3>
 4b4:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <time3+0x1>
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	51 f7       	brne	.-44     	; 0x490 <main+0x4>
 4bc:	0e 94 38 02 	call	0x470	; 0x470 <task3>
 4c0:	e7 cf       	rjmp	.-50     	; 0x490 <main+0x4>

000004c2 <fprintf>:
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e6       	ldi	r30, 0x67	; 103
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__prologue_saves__+0x20>
 4ce:	ae 01       	movw	r20, r28
 4d0:	47 5f       	subi	r20, 0xF7	; 247
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	6f 81       	ldd	r22, Y+7	; 0x07
 4d6:	78 85       	ldd	r23, Y+8	; 0x08
 4d8:	8d 81       	ldd	r24, Y+5	; 0x05
 4da:	9e 81       	ldd	r25, Y+6	; 0x06
 4dc:	0e 94 a7 02 	call	0x54e	; 0x54e <vfprintf>
 4e0:	e2 e0       	ldi	r30, 0x02	; 2
 4e2:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__epilogue_restores__+0x20>

000004e6 <fwrite>:
 4e6:	a0 e0       	ldi	r26, 0x00	; 0
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e9 e7       	ldi	r30, 0x79	; 121
 4ec:	f2 e0       	ldi	r31, 0x02	; 2
 4ee:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__prologue_saves__+0xc>
 4f2:	5b 01       	movw	r10, r22
 4f4:	4a 01       	movw	r8, r20
 4f6:	79 01       	movw	r14, r18
 4f8:	d9 01       	movw	r26, r18
 4fa:	13 96       	adiw	r26, 0x03	; 3
 4fc:	2c 91       	ld	r18, X
 4fe:	21 ff       	sbrs	r18, 1
 500:	1d c0       	rjmp	.+58     	; 0x53c <fwrite+0x56>
 502:	c0 e0       	ldi	r28, 0x00	; 0
 504:	d0 e0       	ldi	r29, 0x00	; 0
 506:	c8 15       	cp	r28, r8
 508:	d9 05       	cpc	r29, r9
 50a:	d9 f0       	breq	.+54     	; 0x542 <fwrite+0x5c>
 50c:	8c 01       	movw	r16, r24
 50e:	6c 01       	movw	r12, r24
 510:	ca 0c       	add	r12, r10
 512:	db 1c       	adc	r13, r11
 514:	c8 01       	movw	r24, r16
 516:	0c 15       	cp	r16, r12
 518:	1d 05       	cpc	r17, r13
 51a:	71 f0       	breq	.+28     	; 0x538 <fwrite+0x52>
 51c:	0f 5f       	subi	r16, 0xFF	; 255
 51e:	1f 4f       	sbci	r17, 0xFF	; 255
 520:	d7 01       	movw	r26, r14
 522:	18 96       	adiw	r26, 0x08	; 8
 524:	ed 91       	ld	r30, X+
 526:	fc 91       	ld	r31, X
 528:	19 97       	sbiw	r26, 0x09	; 9
 52a:	b7 01       	movw	r22, r14
 52c:	dc 01       	movw	r26, r24
 52e:	8c 91       	ld	r24, X
 530:	09 95       	icall
 532:	89 2b       	or	r24, r25
 534:	79 f3       	breq	.-34     	; 0x514 <fwrite+0x2e>
 536:	05 c0       	rjmp	.+10     	; 0x542 <fwrite+0x5c>
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	e5 cf       	rjmp	.-54     	; 0x506 <fwrite+0x20>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	01 c0       	rjmp	.+2      	; 0x544 <fwrite+0x5e>
 542:	ce 01       	movw	r24, r28
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	ec e0       	ldi	r30, 0x0C	; 12
 54a:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__epilogue_restores__+0xc>

0000054e <vfprintf>:
 54e:	ab e0       	ldi	r26, 0x0B	; 11
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	ed ea       	ldi	r30, 0xAD	; 173
 554:	f2 e0       	ldi	r31, 0x02	; 2
 556:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__prologue_saves__>
 55a:	6c 01       	movw	r12, r24
 55c:	7b 01       	movw	r14, r22
 55e:	8a 01       	movw	r16, r20
 560:	fc 01       	movw	r30, r24
 562:	17 82       	std	Z+7, r1	; 0x07
 564:	16 82       	std	Z+6, r1	; 0x06
 566:	83 81       	ldd	r24, Z+3	; 0x03
 568:	81 ff       	sbrs	r24, 1
 56a:	cc c1       	rjmp	.+920    	; 0x904 <__EEPROM_REGION_LENGTH__+0x104>
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	3c 01       	movw	r6, r24
 572:	f6 01       	movw	r30, r12
 574:	93 81       	ldd	r25, Z+3	; 0x03
 576:	f7 01       	movw	r30, r14
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	88 23       	and	r24, r24
 584:	09 f4       	brne	.+2      	; 0x588 <vfprintf+0x3a>
 586:	ba c1       	rjmp	.+884    	; 0x8fc <__EEPROM_REGION_LENGTH__+0xfc>
 588:	85 32       	cpi	r24, 0x25	; 37
 58a:	39 f4       	brne	.+14     	; 0x59a <vfprintf+0x4c>
 58c:	93 fd       	sbrc	r25, 3
 58e:	85 91       	lpm	r24, Z+
 590:	93 ff       	sbrs	r25, 3
 592:	81 91       	ld	r24, Z+
 594:	7f 01       	movw	r14, r30
 596:	85 32       	cpi	r24, 0x25	; 37
 598:	29 f4       	brne	.+10     	; 0x5a4 <vfprintf+0x56>
 59a:	b6 01       	movw	r22, r12
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 5a2:	e7 cf       	rjmp	.-50     	; 0x572 <vfprintf+0x24>
 5a4:	91 2c       	mov	r9, r1
 5a6:	21 2c       	mov	r2, r1
 5a8:	31 2c       	mov	r3, r1
 5aa:	ff e1       	ldi	r31, 0x1F	; 31
 5ac:	f3 15       	cp	r31, r3
 5ae:	d8 f0       	brcs	.+54     	; 0x5e6 <vfprintf+0x98>
 5b0:	8b 32       	cpi	r24, 0x2B	; 43
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <vfprintf+0x84>
 5b4:	38 f4       	brcc	.+14     	; 0x5c4 <vfprintf+0x76>
 5b6:	80 32       	cpi	r24, 0x20	; 32
 5b8:	79 f0       	breq	.+30     	; 0x5d8 <vfprintf+0x8a>
 5ba:	83 32       	cpi	r24, 0x23	; 35
 5bc:	a1 f4       	brne	.+40     	; 0x5e6 <vfprintf+0x98>
 5be:	23 2d       	mov	r18, r3
 5c0:	20 61       	ori	r18, 0x10	; 16
 5c2:	1d c0       	rjmp	.+58     	; 0x5fe <vfprintf+0xb0>
 5c4:	8d 32       	cpi	r24, 0x2D	; 45
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <vfprintf+0x92>
 5c8:	80 33       	cpi	r24, 0x30	; 48
 5ca:	69 f4       	brne	.+26     	; 0x5e6 <vfprintf+0x98>
 5cc:	23 2d       	mov	r18, r3
 5ce:	21 60       	ori	r18, 0x01	; 1
 5d0:	16 c0       	rjmp	.+44     	; 0x5fe <vfprintf+0xb0>
 5d2:	83 2d       	mov	r24, r3
 5d4:	82 60       	ori	r24, 0x02	; 2
 5d6:	38 2e       	mov	r3, r24
 5d8:	e3 2d       	mov	r30, r3
 5da:	e4 60       	ori	r30, 0x04	; 4
 5dc:	3e 2e       	mov	r3, r30
 5de:	2a c0       	rjmp	.+84     	; 0x634 <vfprintf+0xe6>
 5e0:	f3 2d       	mov	r31, r3
 5e2:	f8 60       	ori	r31, 0x08	; 8
 5e4:	1d c0       	rjmp	.+58     	; 0x620 <vfprintf+0xd2>
 5e6:	37 fc       	sbrc	r3, 7
 5e8:	2d c0       	rjmp	.+90     	; 0x644 <vfprintf+0xf6>
 5ea:	20 ed       	ldi	r18, 0xD0	; 208
 5ec:	28 0f       	add	r18, r24
 5ee:	2a 30       	cpi	r18, 0x0A	; 10
 5f0:	40 f0       	brcs	.+16     	; 0x602 <vfprintf+0xb4>
 5f2:	8e 32       	cpi	r24, 0x2E	; 46
 5f4:	b9 f4       	brne	.+46     	; 0x624 <vfprintf+0xd6>
 5f6:	36 fc       	sbrc	r3, 6
 5f8:	81 c1       	rjmp	.+770    	; 0x8fc <__EEPROM_REGION_LENGTH__+0xfc>
 5fa:	23 2d       	mov	r18, r3
 5fc:	20 64       	ori	r18, 0x40	; 64
 5fe:	32 2e       	mov	r3, r18
 600:	19 c0       	rjmp	.+50     	; 0x634 <vfprintf+0xe6>
 602:	36 fe       	sbrs	r3, 6
 604:	06 c0       	rjmp	.+12     	; 0x612 <vfprintf+0xc4>
 606:	8a e0       	ldi	r24, 0x0A	; 10
 608:	98 9e       	mul	r9, r24
 60a:	20 0d       	add	r18, r0
 60c:	11 24       	eor	r1, r1
 60e:	92 2e       	mov	r9, r18
 610:	11 c0       	rjmp	.+34     	; 0x634 <vfprintf+0xe6>
 612:	ea e0       	ldi	r30, 0x0A	; 10
 614:	2e 9e       	mul	r2, r30
 616:	20 0d       	add	r18, r0
 618:	11 24       	eor	r1, r1
 61a:	22 2e       	mov	r2, r18
 61c:	f3 2d       	mov	r31, r3
 61e:	f0 62       	ori	r31, 0x20	; 32
 620:	3f 2e       	mov	r3, r31
 622:	08 c0       	rjmp	.+16     	; 0x634 <vfprintf+0xe6>
 624:	8c 36       	cpi	r24, 0x6C	; 108
 626:	21 f4       	brne	.+8      	; 0x630 <vfprintf+0xe2>
 628:	83 2d       	mov	r24, r3
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	38 2e       	mov	r3, r24
 62e:	02 c0       	rjmp	.+4      	; 0x634 <vfprintf+0xe6>
 630:	88 36       	cpi	r24, 0x68	; 104
 632:	41 f4       	brne	.+16     	; 0x644 <vfprintf+0xf6>
 634:	f7 01       	movw	r30, r14
 636:	93 fd       	sbrc	r25, 3
 638:	85 91       	lpm	r24, Z+
 63a:	93 ff       	sbrs	r25, 3
 63c:	81 91       	ld	r24, Z+
 63e:	7f 01       	movw	r14, r30
 640:	81 11       	cpse	r24, r1
 642:	b3 cf       	rjmp	.-154    	; 0x5aa <vfprintf+0x5c>
 644:	98 2f       	mov	r25, r24
 646:	9f 7d       	andi	r25, 0xDF	; 223
 648:	95 54       	subi	r25, 0x45	; 69
 64a:	93 30       	cpi	r25, 0x03	; 3
 64c:	28 f4       	brcc	.+10     	; 0x658 <vfprintf+0x10a>
 64e:	0c 5f       	subi	r16, 0xFC	; 252
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	9f e3       	ldi	r25, 0x3F	; 63
 654:	99 83       	std	Y+1, r25	; 0x01
 656:	0d c0       	rjmp	.+26     	; 0x672 <vfprintf+0x124>
 658:	83 36       	cpi	r24, 0x63	; 99
 65a:	31 f0       	breq	.+12     	; 0x668 <vfprintf+0x11a>
 65c:	83 37       	cpi	r24, 0x73	; 115
 65e:	71 f0       	breq	.+28     	; 0x67c <vfprintf+0x12e>
 660:	83 35       	cpi	r24, 0x53	; 83
 662:	09 f0       	breq	.+2      	; 0x666 <vfprintf+0x118>
 664:	59 c0       	rjmp	.+178    	; 0x718 <vfprintf+0x1ca>
 666:	21 c0       	rjmp	.+66     	; 0x6aa <vfprintf+0x15c>
 668:	f8 01       	movw	r30, r16
 66a:	80 81       	ld	r24, Z
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	0e 5f       	subi	r16, 0xFE	; 254
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	88 24       	eor	r8, r8
 674:	83 94       	inc	r8
 676:	91 2c       	mov	r9, r1
 678:	53 01       	movw	r10, r6
 67a:	13 c0       	rjmp	.+38     	; 0x6a2 <vfprintf+0x154>
 67c:	28 01       	movw	r4, r16
 67e:	f2 e0       	ldi	r31, 0x02	; 2
 680:	4f 0e       	add	r4, r31
 682:	51 1c       	adc	r5, r1
 684:	f8 01       	movw	r30, r16
 686:	a0 80       	ld	r10, Z
 688:	b1 80       	ldd	r11, Z+1	; 0x01
 68a:	36 fe       	sbrs	r3, 6
 68c:	03 c0       	rjmp	.+6      	; 0x694 <vfprintf+0x146>
 68e:	69 2d       	mov	r22, r9
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0x14a>
 694:	6f ef       	ldi	r22, 0xFF	; 255
 696:	7f ef       	ldi	r23, 0xFF	; 255
 698:	c5 01       	movw	r24, r10
 69a:	0e 94 93 04 	call	0x926	; 0x926 <strnlen>
 69e:	4c 01       	movw	r8, r24
 6a0:	82 01       	movw	r16, r4
 6a2:	f3 2d       	mov	r31, r3
 6a4:	ff 77       	andi	r31, 0x7F	; 127
 6a6:	3f 2e       	mov	r3, r31
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <vfprintf+0x188>
 6aa:	28 01       	movw	r4, r16
 6ac:	22 e0       	ldi	r18, 0x02	; 2
 6ae:	42 0e       	add	r4, r18
 6b0:	51 1c       	adc	r5, r1
 6b2:	f8 01       	movw	r30, r16
 6b4:	a0 80       	ld	r10, Z
 6b6:	b1 80       	ldd	r11, Z+1	; 0x01
 6b8:	36 fe       	sbrs	r3, 6
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <vfprintf+0x174>
 6bc:	69 2d       	mov	r22, r9
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <vfprintf+0x178>
 6c2:	6f ef       	ldi	r22, 0xFF	; 255
 6c4:	7f ef       	ldi	r23, 0xFF	; 255
 6c6:	c5 01       	movw	r24, r10
 6c8:	0e 94 88 04 	call	0x910	; 0x910 <strnlen_P>
 6cc:	4c 01       	movw	r8, r24
 6ce:	f3 2d       	mov	r31, r3
 6d0:	f0 68       	ori	r31, 0x80	; 128
 6d2:	3f 2e       	mov	r3, r31
 6d4:	82 01       	movw	r16, r4
 6d6:	33 fc       	sbrc	r3, 3
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <vfprintf+0x1c2>
 6da:	82 2d       	mov	r24, r2
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	88 16       	cp	r8, r24
 6e0:	99 06       	cpc	r9, r25
 6e2:	b0 f4       	brcc	.+44     	; 0x710 <vfprintf+0x1c2>
 6e4:	b6 01       	movw	r22, r12
 6e6:	80 e2       	ldi	r24, 0x20	; 32
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 6ee:	2a 94       	dec	r2
 6f0:	f4 cf       	rjmp	.-24     	; 0x6da <vfprintf+0x18c>
 6f2:	f5 01       	movw	r30, r10
 6f4:	37 fc       	sbrc	r3, 7
 6f6:	85 91       	lpm	r24, Z+
 6f8:	37 fe       	sbrs	r3, 7
 6fa:	81 91       	ld	r24, Z+
 6fc:	5f 01       	movw	r10, r30
 6fe:	b6 01       	movw	r22, r12
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 706:	21 10       	cpse	r2, r1
 708:	2a 94       	dec	r2
 70a:	21 e0       	ldi	r18, 0x01	; 1
 70c:	82 1a       	sub	r8, r18
 70e:	91 08       	sbc	r9, r1
 710:	81 14       	cp	r8, r1
 712:	91 04       	cpc	r9, r1
 714:	71 f7       	brne	.-36     	; 0x6f2 <vfprintf+0x1a4>
 716:	e8 c0       	rjmp	.+464    	; 0x8e8 <__EEPROM_REGION_LENGTH__+0xe8>
 718:	84 36       	cpi	r24, 0x64	; 100
 71a:	11 f0       	breq	.+4      	; 0x720 <vfprintf+0x1d2>
 71c:	89 36       	cpi	r24, 0x69	; 105
 71e:	41 f5       	brne	.+80     	; 0x770 <vfprintf+0x222>
 720:	f8 01       	movw	r30, r16
 722:	37 fe       	sbrs	r3, 7
 724:	07 c0       	rjmp	.+14     	; 0x734 <vfprintf+0x1e6>
 726:	60 81       	ld	r22, Z
 728:	71 81       	ldd	r23, Z+1	; 0x01
 72a:	82 81       	ldd	r24, Z+2	; 0x02
 72c:	93 81       	ldd	r25, Z+3	; 0x03
 72e:	0c 5f       	subi	r16, 0xFC	; 252
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	08 c0       	rjmp	.+16     	; 0x744 <vfprintf+0x1f6>
 734:	60 81       	ld	r22, Z
 736:	71 81       	ldd	r23, Z+1	; 0x01
 738:	07 2e       	mov	r0, r23
 73a:	00 0c       	add	r0, r0
 73c:	88 0b       	sbc	r24, r24
 73e:	99 0b       	sbc	r25, r25
 740:	0e 5f       	subi	r16, 0xFE	; 254
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	f3 2d       	mov	r31, r3
 746:	ff 76       	andi	r31, 0x6F	; 111
 748:	3f 2e       	mov	r3, r31
 74a:	97 ff       	sbrs	r25, 7
 74c:	09 c0       	rjmp	.+18     	; 0x760 <vfprintf+0x212>
 74e:	90 95       	com	r25
 750:	80 95       	com	r24
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	f0 68       	ori	r31, 0x80	; 128
 75e:	3f 2e       	mov	r3, r31
 760:	2a e0       	ldi	r18, 0x0A	; 10
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	a3 01       	movw	r20, r6
 766:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__ultoa_invert>
 76a:	88 2e       	mov	r8, r24
 76c:	86 18       	sub	r8, r6
 76e:	45 c0       	rjmp	.+138    	; 0x7fa <vfprintf+0x2ac>
 770:	85 37       	cpi	r24, 0x75	; 117
 772:	31 f4       	brne	.+12     	; 0x780 <vfprintf+0x232>
 774:	23 2d       	mov	r18, r3
 776:	2f 7e       	andi	r18, 0xEF	; 239
 778:	b2 2e       	mov	r11, r18
 77a:	2a e0       	ldi	r18, 0x0A	; 10
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	25 c0       	rjmp	.+74     	; 0x7ca <vfprintf+0x27c>
 780:	93 2d       	mov	r25, r3
 782:	99 7f       	andi	r25, 0xF9	; 249
 784:	b9 2e       	mov	r11, r25
 786:	8f 36       	cpi	r24, 0x6F	; 111
 788:	c1 f0       	breq	.+48     	; 0x7ba <vfprintf+0x26c>
 78a:	18 f4       	brcc	.+6      	; 0x792 <vfprintf+0x244>
 78c:	88 35       	cpi	r24, 0x58	; 88
 78e:	79 f0       	breq	.+30     	; 0x7ae <vfprintf+0x260>
 790:	b5 c0       	rjmp	.+362    	; 0x8fc <__EEPROM_REGION_LENGTH__+0xfc>
 792:	80 37       	cpi	r24, 0x70	; 112
 794:	19 f0       	breq	.+6      	; 0x79c <vfprintf+0x24e>
 796:	88 37       	cpi	r24, 0x78	; 120
 798:	21 f0       	breq	.+8      	; 0x7a2 <vfprintf+0x254>
 79a:	b0 c0       	rjmp	.+352    	; 0x8fc <__EEPROM_REGION_LENGTH__+0xfc>
 79c:	e9 2f       	mov	r30, r25
 79e:	e0 61       	ori	r30, 0x10	; 16
 7a0:	be 2e       	mov	r11, r30
 7a2:	b4 fe       	sbrs	r11, 4
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <vfprintf+0x272>
 7a6:	fb 2d       	mov	r31, r11
 7a8:	f4 60       	ori	r31, 0x04	; 4
 7aa:	bf 2e       	mov	r11, r31
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <vfprintf+0x272>
 7ae:	34 fe       	sbrs	r3, 4
 7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <vfprintf+0x278>
 7b2:	29 2f       	mov	r18, r25
 7b4:	26 60       	ori	r18, 0x06	; 6
 7b6:	b2 2e       	mov	r11, r18
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <vfprintf+0x278>
 7ba:	28 e0       	ldi	r18, 0x08	; 8
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <vfprintf+0x27c>
 7c0:	20 e1       	ldi	r18, 0x10	; 16
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x27c>
 7c6:	20 e1       	ldi	r18, 0x10	; 16
 7c8:	32 e0       	ldi	r19, 0x02	; 2
 7ca:	f8 01       	movw	r30, r16
 7cc:	b7 fe       	sbrs	r11, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <vfprintf+0x290>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x29c>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 5f       	subi	r16, 0xFE	; 254
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	a3 01       	movw	r20, r6
 7ec:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__ultoa_invert>
 7f0:	88 2e       	mov	r8, r24
 7f2:	86 18       	sub	r8, r6
 7f4:	fb 2d       	mov	r31, r11
 7f6:	ff 77       	andi	r31, 0x7F	; 127
 7f8:	3f 2e       	mov	r3, r31
 7fa:	36 fe       	sbrs	r3, 6
 7fc:	0d c0       	rjmp	.+26     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 7fe:	23 2d       	mov	r18, r3
 800:	2e 7f       	andi	r18, 0xFE	; 254
 802:	a2 2e       	mov	r10, r18
 804:	89 14       	cp	r8, r9
 806:	58 f4       	brcc	.+22     	; 0x81e <__EEPROM_REGION_LENGTH__+0x1e>
 808:	34 fe       	sbrs	r3, 4
 80a:	0b c0       	rjmp	.+22     	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 80c:	32 fc       	sbrc	r3, 2
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 810:	83 2d       	mov	r24, r3
 812:	8e 7e       	andi	r24, 0xEE	; 238
 814:	a8 2e       	mov	r10, r24
 816:	05 c0       	rjmp	.+10     	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 818:	b8 2c       	mov	r11, r8
 81a:	a3 2c       	mov	r10, r3
 81c:	03 c0       	rjmp	.+6      	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 81e:	b8 2c       	mov	r11, r8
 820:	01 c0       	rjmp	.+2      	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 822:	b9 2c       	mov	r11, r9
 824:	a4 fe       	sbrs	r10, 4
 826:	0f c0       	rjmp	.+30     	; 0x846 <__EEPROM_REGION_LENGTH__+0x46>
 828:	fe 01       	movw	r30, r28
 82a:	e8 0d       	add	r30, r8
 82c:	f1 1d       	adc	r31, r1
 82e:	80 81       	ld	r24, Z
 830:	80 33       	cpi	r24, 0x30	; 48
 832:	21 f4       	brne	.+8      	; 0x83c <__EEPROM_REGION_LENGTH__+0x3c>
 834:	9a 2d       	mov	r25, r10
 836:	99 7e       	andi	r25, 0xE9	; 233
 838:	a9 2e       	mov	r10, r25
 83a:	09 c0       	rjmp	.+18     	; 0x84e <__EEPROM_REGION_LENGTH__+0x4e>
 83c:	a2 fe       	sbrs	r10, 2
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__EEPROM_REGION_LENGTH__+0x4c>
 840:	b3 94       	inc	r11
 842:	b3 94       	inc	r11
 844:	04 c0       	rjmp	.+8      	; 0x84e <__EEPROM_REGION_LENGTH__+0x4e>
 846:	8a 2d       	mov	r24, r10
 848:	86 78       	andi	r24, 0x86	; 134
 84a:	09 f0       	breq	.+2      	; 0x84e <__EEPROM_REGION_LENGTH__+0x4e>
 84c:	b3 94       	inc	r11
 84e:	a3 fc       	sbrc	r10, 3
 850:	11 c0       	rjmp	.+34     	; 0x874 <__EEPROM_REGION_LENGTH__+0x74>
 852:	a0 fe       	sbrs	r10, 0
 854:	06 c0       	rjmp	.+12     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 856:	b2 14       	cp	r11, r2
 858:	88 f4       	brcc	.+34     	; 0x87c <__EEPROM_REGION_LENGTH__+0x7c>
 85a:	28 0c       	add	r2, r8
 85c:	92 2c       	mov	r9, r2
 85e:	9b 18       	sub	r9, r11
 860:	0e c0       	rjmp	.+28     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 862:	b2 14       	cp	r11, r2
 864:	60 f4       	brcc	.+24     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 866:	b6 01       	movw	r22, r12
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 870:	b3 94       	inc	r11
 872:	f7 cf       	rjmp	.-18     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 874:	b2 14       	cp	r11, r2
 876:	18 f4       	brcc	.+6      	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 878:	2b 18       	sub	r2, r11
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__EEPROM_REGION_LENGTH__+0x80>
 87c:	98 2c       	mov	r9, r8
 87e:	21 2c       	mov	r2, r1
 880:	a4 fe       	sbrs	r10, 4
 882:	10 c0       	rjmp	.+32     	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 884:	b6 01       	movw	r22, r12
 886:	80 e3       	ldi	r24, 0x30	; 48
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 88e:	a2 fe       	sbrs	r10, 2
 890:	17 c0       	rjmp	.+46     	; 0x8c0 <__EEPROM_REGION_LENGTH__+0xc0>
 892:	a1 fc       	sbrc	r10, 1
 894:	03 c0       	rjmp	.+6      	; 0x89c <__EEPROM_REGION_LENGTH__+0x9c>
 896:	88 e7       	ldi	r24, 0x78	; 120
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__EEPROM_REGION_LENGTH__+0xa0>
 89c:	88 e5       	ldi	r24, 0x58	; 88
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	b6 01       	movw	r22, r12
 8a2:	0c c0       	rjmp	.+24     	; 0x8bc <__EEPROM_REGION_LENGTH__+0xbc>
 8a4:	8a 2d       	mov	r24, r10
 8a6:	86 78       	andi	r24, 0x86	; 134
 8a8:	59 f0       	breq	.+22     	; 0x8c0 <__EEPROM_REGION_LENGTH__+0xc0>
 8aa:	a1 fe       	sbrs	r10, 1
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
 8ae:	8b e2       	ldi	r24, 0x2B	; 43
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
 8b2:	80 e2       	ldi	r24, 0x20	; 32
 8b4:	a7 fc       	sbrc	r10, 7
 8b6:	8d e2       	ldi	r24, 0x2D	; 45
 8b8:	b6 01       	movw	r22, r12
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 8c0:	89 14       	cp	r8, r9
 8c2:	38 f4       	brcc	.+14     	; 0x8d2 <__EEPROM_REGION_LENGTH__+0xd2>
 8c4:	b6 01       	movw	r22, r12
 8c6:	80 e3       	ldi	r24, 0x30	; 48
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 8ce:	9a 94       	dec	r9
 8d0:	f7 cf       	rjmp	.-18     	; 0x8c0 <__EEPROM_REGION_LENGTH__+0xc0>
 8d2:	8a 94       	dec	r8
 8d4:	f3 01       	movw	r30, r6
 8d6:	e8 0d       	add	r30, r8
 8d8:	f1 1d       	adc	r31, r1
 8da:	80 81       	ld	r24, Z
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 8e4:	81 10       	cpse	r8, r1
 8e6:	f5 cf       	rjmp	.-22     	; 0x8d2 <__EEPROM_REGION_LENGTH__+0xd2>
 8e8:	22 20       	and	r2, r2
 8ea:	09 f4       	brne	.+2      	; 0x8ee <__EEPROM_REGION_LENGTH__+0xee>
 8ec:	42 ce       	rjmp	.-892    	; 0x572 <vfprintf+0x24>
 8ee:	b6 01       	movw	r22, r12
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 9e 04 	call	0x93c	; 0x93c <fputc>
 8f8:	2a 94       	dec	r2
 8fa:	f6 cf       	rjmp	.-20     	; 0x8e8 <__EEPROM_REGION_LENGTH__+0xe8>
 8fc:	f6 01       	movw	r30, r12
 8fe:	86 81       	ldd	r24, Z+6	; 0x06
 900:	97 81       	ldd	r25, Z+7	; 0x07
 902:	02 c0       	rjmp	.+4      	; 0x908 <__EEPROM_REGION_LENGTH__+0x108>
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	9f ef       	ldi	r25, 0xFF	; 255
 908:	2b 96       	adiw	r28, 0x0b	; 11
 90a:	e2 e1       	ldi	r30, 0x12	; 18
 90c:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__epilogue_restores__>

00000910 <strnlen_P>:
 910:	fc 01       	movw	r30, r24
 912:	05 90       	lpm	r0, Z+
 914:	61 50       	subi	r22, 0x01	; 1
 916:	70 40       	sbci	r23, 0x00	; 0
 918:	01 10       	cpse	r0, r1
 91a:	d8 f7       	brcc	.-10     	; 0x912 <strnlen_P+0x2>
 91c:	80 95       	com	r24
 91e:	90 95       	com	r25
 920:	8e 0f       	add	r24, r30
 922:	9f 1f       	adc	r25, r31
 924:	08 95       	ret

00000926 <strnlen>:
 926:	fc 01       	movw	r30, r24
 928:	61 50       	subi	r22, 0x01	; 1
 92a:	70 40       	sbci	r23, 0x00	; 0
 92c:	01 90       	ld	r0, Z+
 92e:	01 10       	cpse	r0, r1
 930:	d8 f7       	brcc	.-10     	; 0x928 <strnlen+0x2>
 932:	80 95       	com	r24
 934:	90 95       	com	r25
 936:	8e 0f       	add	r24, r30
 938:	9f 1f       	adc	r25, r31
 93a:	08 95       	ret

0000093c <fputc>:
 93c:	0f 93       	push	r16
 93e:	1f 93       	push	r17
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	fb 01       	movw	r30, r22
 946:	23 81       	ldd	r18, Z+3	; 0x03
 948:	21 fd       	sbrc	r18, 1
 94a:	03 c0       	rjmp	.+6      	; 0x952 <fputc+0x16>
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	2c c0       	rjmp	.+88     	; 0x9aa <fputc+0x6e>
 952:	22 ff       	sbrs	r18, 2
 954:	16 c0       	rjmp	.+44     	; 0x982 <fputc+0x46>
 956:	46 81       	ldd	r20, Z+6	; 0x06
 958:	57 81       	ldd	r21, Z+7	; 0x07
 95a:	24 81       	ldd	r18, Z+4	; 0x04
 95c:	35 81       	ldd	r19, Z+5	; 0x05
 95e:	42 17       	cp	r20, r18
 960:	53 07       	cpc	r21, r19
 962:	44 f4       	brge	.+16     	; 0x974 <fputc+0x38>
 964:	a0 81       	ld	r26, Z
 966:	b1 81       	ldd	r27, Z+1	; 0x01
 968:	9d 01       	movw	r18, r26
 96a:	2f 5f       	subi	r18, 0xFF	; 255
 96c:	3f 4f       	sbci	r19, 0xFF	; 255
 96e:	31 83       	std	Z+1, r19	; 0x01
 970:	20 83       	st	Z, r18
 972:	8c 93       	st	X, r24
 974:	26 81       	ldd	r18, Z+6	; 0x06
 976:	37 81       	ldd	r19, Z+7	; 0x07
 978:	2f 5f       	subi	r18, 0xFF	; 255
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
 97c:	37 83       	std	Z+7, r19	; 0x07
 97e:	26 83       	std	Z+6, r18	; 0x06
 980:	14 c0       	rjmp	.+40     	; 0x9aa <fputc+0x6e>
 982:	8b 01       	movw	r16, r22
 984:	ec 01       	movw	r28, r24
 986:	fb 01       	movw	r30, r22
 988:	00 84       	ldd	r0, Z+8	; 0x08
 98a:	f1 85       	ldd	r31, Z+9	; 0x09
 98c:	e0 2d       	mov	r30, r0
 98e:	09 95       	icall
 990:	89 2b       	or	r24, r25
 992:	e1 f6       	brne	.-72     	; 0x94c <fputc+0x10>
 994:	d8 01       	movw	r26, r16
 996:	16 96       	adiw	r26, 0x06	; 6
 998:	8d 91       	ld	r24, X+
 99a:	9c 91       	ld	r25, X
 99c:	17 97       	sbiw	r26, 0x07	; 7
 99e:	01 96       	adiw	r24, 0x01	; 1
 9a0:	17 96       	adiw	r26, 0x07	; 7
 9a2:	9c 93       	st	X, r25
 9a4:	8e 93       	st	-X, r24
 9a6:	16 97       	sbiw	r26, 0x06	; 6
 9a8:	ce 01       	movw	r24, r28
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	1f 91       	pop	r17
 9b0:	0f 91       	pop	r16
 9b2:	08 95       	ret

000009b4 <__ultoa_invert>:
 9b4:	fa 01       	movw	r30, r20
 9b6:	aa 27       	eor	r26, r26
 9b8:	28 30       	cpi	r18, 0x08	; 8
 9ba:	51 f1       	breq	.+84     	; 0xa10 <__ultoa_invert+0x5c>
 9bc:	20 31       	cpi	r18, 0x10	; 16
 9be:	81 f1       	breq	.+96     	; 0xa20 <__ultoa_invert+0x6c>
 9c0:	e8 94       	clt
 9c2:	6f 93       	push	r22
 9c4:	6e 7f       	andi	r22, 0xFE	; 254
 9c6:	6e 5f       	subi	r22, 0xFE	; 254
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	af 4f       	sbci	r26, 0xFF	; 255
 9d0:	b1 e0       	ldi	r27, 0x01	; 1
 9d2:	3e d0       	rcall	.+124    	; 0xa50 <__ultoa_invert+0x9c>
 9d4:	b4 e0       	ldi	r27, 0x04	; 4
 9d6:	3c d0       	rcall	.+120    	; 0xa50 <__ultoa_invert+0x9c>
 9d8:	67 0f       	add	r22, r23
 9da:	78 1f       	adc	r23, r24
 9dc:	89 1f       	adc	r24, r25
 9de:	9a 1f       	adc	r25, r26
 9e0:	a1 1d       	adc	r26, r1
 9e2:	68 0f       	add	r22, r24
 9e4:	79 1f       	adc	r23, r25
 9e6:	8a 1f       	adc	r24, r26
 9e8:	91 1d       	adc	r25, r1
 9ea:	a1 1d       	adc	r26, r1
 9ec:	6a 0f       	add	r22, r26
 9ee:	71 1d       	adc	r23, r1
 9f0:	81 1d       	adc	r24, r1
 9f2:	91 1d       	adc	r25, r1
 9f4:	a1 1d       	adc	r26, r1
 9f6:	20 d0       	rcall	.+64     	; 0xa38 <__ultoa_invert+0x84>
 9f8:	09 f4       	brne	.+2      	; 0x9fc <__ultoa_invert+0x48>
 9fa:	68 94       	set
 9fc:	3f 91       	pop	r19
 9fe:	2a e0       	ldi	r18, 0x0A	; 10
 a00:	26 9f       	mul	r18, r22
 a02:	11 24       	eor	r1, r1
 a04:	30 19       	sub	r19, r0
 a06:	30 5d       	subi	r19, 0xD0	; 208
 a08:	31 93       	st	Z+, r19
 a0a:	de f6       	brtc	.-74     	; 0x9c2 <__ultoa_invert+0xe>
 a0c:	cf 01       	movw	r24, r30
 a0e:	08 95       	ret
 a10:	46 2f       	mov	r20, r22
 a12:	47 70       	andi	r20, 0x07	; 7
 a14:	40 5d       	subi	r20, 0xD0	; 208
 a16:	41 93       	st	Z+, r20
 a18:	b3 e0       	ldi	r27, 0x03	; 3
 a1a:	0f d0       	rcall	.+30     	; 0xa3a <__ultoa_invert+0x86>
 a1c:	c9 f7       	brne	.-14     	; 0xa10 <__ultoa_invert+0x5c>
 a1e:	f6 cf       	rjmp	.-20     	; 0xa0c <__ultoa_invert+0x58>
 a20:	46 2f       	mov	r20, r22
 a22:	4f 70       	andi	r20, 0x0F	; 15
 a24:	40 5d       	subi	r20, 0xD0	; 208
 a26:	4a 33       	cpi	r20, 0x3A	; 58
 a28:	18 f0       	brcs	.+6      	; 0xa30 <__ultoa_invert+0x7c>
 a2a:	49 5d       	subi	r20, 0xD9	; 217
 a2c:	31 fd       	sbrc	r19, 1
 a2e:	40 52       	subi	r20, 0x20	; 32
 a30:	41 93       	st	Z+, r20
 a32:	02 d0       	rcall	.+4      	; 0xa38 <__ultoa_invert+0x84>
 a34:	a9 f7       	brne	.-22     	; 0xa20 <__ultoa_invert+0x6c>
 a36:	ea cf       	rjmp	.-44     	; 0xa0c <__ultoa_invert+0x58>
 a38:	b4 e0       	ldi	r27, 0x04	; 4
 a3a:	a6 95       	lsr	r26
 a3c:	97 95       	ror	r25
 a3e:	87 95       	ror	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	ba 95       	dec	r27
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__ultoa_invert+0x86>
 a48:	00 97       	sbiw	r24, 0x00	; 0
 a4a:	61 05       	cpc	r22, r1
 a4c:	71 05       	cpc	r23, r1
 a4e:	08 95       	ret
 a50:	9b 01       	movw	r18, r22
 a52:	ac 01       	movw	r20, r24
 a54:	0a 2e       	mov	r0, r26
 a56:	06 94       	lsr	r0
 a58:	57 95       	ror	r21
 a5a:	47 95       	ror	r20
 a5c:	37 95       	ror	r19
 a5e:	27 95       	ror	r18
 a60:	ba 95       	dec	r27
 a62:	c9 f7       	brne	.-14     	; 0xa56 <__ultoa_invert+0xa2>
 a64:	62 0f       	add	r22, r18
 a66:	73 1f       	adc	r23, r19
 a68:	84 1f       	adc	r24, r20
 a6a:	95 1f       	adc	r25, r21
 a6c:	a0 1d       	adc	r26, r0
 a6e:	08 95       	ret

00000a70 <__prologue_saves__>:
 a70:	2f 92       	push	r2
 a72:	3f 92       	push	r3
 a74:	4f 92       	push	r4
 a76:	5f 92       	push	r5
 a78:	6f 92       	push	r6
 a7a:	7f 92       	push	r7
 a7c:	8f 92       	push	r8
 a7e:	9f 92       	push	r9
 a80:	af 92       	push	r10
 a82:	bf 92       	push	r11
 a84:	cf 92       	push	r12
 a86:	df 92       	push	r13
 a88:	ef 92       	push	r14
 a8a:	ff 92       	push	r15
 a8c:	0f 93       	push	r16
 a8e:	1f 93       	push	r17
 a90:	cf 93       	push	r28
 a92:	df 93       	push	r29
 a94:	cd b7       	in	r28, 0x3d	; 61
 a96:	de b7       	in	r29, 0x3e	; 62
 a98:	ca 1b       	sub	r28, r26
 a9a:	db 0b       	sbc	r29, r27
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	09 94       	ijmp

00000aa8 <__epilogue_restores__>:
 aa8:	2a 88       	ldd	r2, Y+18	; 0x12
 aaa:	39 88       	ldd	r3, Y+17	; 0x11
 aac:	48 88       	ldd	r4, Y+16	; 0x10
 aae:	5f 84       	ldd	r5, Y+15	; 0x0f
 ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
 aba:	b9 84       	ldd	r11, Y+9	; 0x09
 abc:	c8 84       	ldd	r12, Y+8	; 0x08
 abe:	df 80       	ldd	r13, Y+7	; 0x07
 ac0:	ee 80       	ldd	r14, Y+6	; 0x06
 ac2:	fd 80       	ldd	r15, Y+5	; 0x05
 ac4:	0c 81       	ldd	r16, Y+4	; 0x04
 ac6:	1b 81       	ldd	r17, Y+3	; 0x03
 ac8:	aa 81       	ldd	r26, Y+2	; 0x02
 aca:	b9 81       	ldd	r27, Y+1	; 0x01
 acc:	ce 0f       	add	r28, r30
 ace:	d1 1d       	adc	r29, r1
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
 ada:	ed 01       	movw	r28, r26
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
