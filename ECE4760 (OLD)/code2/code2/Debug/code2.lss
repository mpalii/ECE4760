
code2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000796  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065e  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  88:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
//FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);
         
//**********************************************************
//timer 0 compare ISR
ISR (TIMER0_COMPA_vect)
begin      
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  //Decrement the three times if they are not already zero
  if (time1>0)	--time1;
  9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
  a0:	88 23       	and	r24, r24
  a2:	29 f0       	breq	.+10     	; 0xae <__vector_14+0x1e>
  a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
  if (time2>0) 	--time2;
  ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <time2>
  b2:	88 23       	and	r24, r24
  b4:	29 f0       	breq	.+10     	; 0xc0 <__vector_14+0x30>
  b6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <time2>
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <time2>
  if (time3>0)	--time3;
  c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <time3>
  c4:	88 23       	and	r24, r24
  c6:	29 f0       	breq	.+10     	; 0xd2 <__vector_14+0x42>
  c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <time3>
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time3>
end  
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <task1>:
//*******************************         
//Task subroutines
//Task 1
void task1(void) 
begin  
  if (tsk3m != 0) time1 >>= 2;  //check for task 3 message
  de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tsk3m>
  e2:	88 23       	and	r24, r24
  e4:	31 f0       	breq	.+12     	; 0xf2 <task1+0x14>
  e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
  ea:	86 95       	lsr	r24
  ec:	86 95       	lsr	r24
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
  
  //toggle the zeros bit
  led = led ^ 0x01;
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <led>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 27       	eor	r24, r25
  fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
  PORTB = led;
  fe:	85 b9       	out	0x05, r24	; 5
 100:	08 95       	ret

00000102 <task2>:
 
//******************************* 
//Task 2  
void task2(void) 
begin
  if (--tsk2c == 0)  //have we waited 1/2 second?
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	81 50       	subi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 10c:	81 11       	cpse	r24, r1
 10e:	0a c0       	rjmp	.+20     	; 0x124 <task2+0x22>
  begin  
  	tsk2c = 4;		//reload the 1/2 sec counter
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     //toggle the ones bit
  	led = led ^ 0x02;
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <led>
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	89 27       	eor	r24, r25
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
  	PORTB = led;
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <task3>:
//Task 3  
void task3(void) 
begin
  // detect D.7 button push and
  // generate the message for task 1
  tsk3m = ~PIND & 0x80;  
 126:	89 b1       	in	r24, 0x09	; 9
 128:	80 95       	com	r24
 12a:	80 78       	andi	r24, 0x80	; 128
 12c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tsk3m>
 130:	08 95       	ret

00000132 <initialize>:
//********************************************************** 
//Set it all up
void initialize(void)
begin
  //set up the ports
  DDRB=0x0f;    // PORT B is an output  
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	84 b9       	out	0x04, r24	; 4
  PORTB=0;
 136:	15 b8       	out	0x05, r1	; 5
  DDRD=0x00;	// PORT D is an input 
 138:	1a b8       	out	0x0a, r1	; 10
           
  //set up timer 0 for 1 mSec ticks
  TIMSK0 = 2;		//turn on timer 0 cmp match ISR 
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  OCR0A = 250;  	//set the compare reg to 250 time ticks
 140:	8a ef       	ldi	r24, 0xFA	; 250
 142:	87 bd       	out	0x27, r24	; 39
  TCCR0A = 0b00000010; // turn on clear-on-match
 144:	94 bd       	out	0x24, r25	; 36
  TCCR0B = 0b00000011;	// clock prescalar to 64
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	95 bd       	out	0x25, r25	; 37
    
  //init the LED status (all off)
  led=0xff; 
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <led>
  
  //init the task timers
  time1=t1;
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
  time2=t2;
 154:	8d e7       	ldi	r24, 0x7D	; 125
 156:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <time2>
  time3=t3;    
 15a:	8c e3       	ldi	r24, 0x3C	; 60
 15c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time3>
  
  //init the task 2 state variable for four ticks
  tsk2c=4;
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  
  //init the task 3 message for no message
  tsk3m=0;
 166:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tsk3m>
  //uart_init();
  //stdout = stdin = stderr = &uart_str;
  //fprintf(stdout,"Starting...\n\r");
      
  //crank up the ISRs
  sei();
 16a:	78 94       	sei
 16c:	08 95       	ret

0000016e <main>:

//**********************************************************       
//Entry point and task scheduler loop
int main(void)
begin  
  initialize();
 16e:	0e 94 99 00 	call	0x132	; 0x132 <initialize>
  
  //main task scheduler loop 
  while(1)
  begin 
  	// reset time and call task    
    if (time1==0){ time1=t1; task1();}
 172:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
 176:	81 11       	cpse	r24, r1
 178:	05 c0       	rjmp	.+10     	; 0x184 <main+0x16>
 17a:	8a ef       	ldi	r24, 0xFA	; 250
 17c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
 180:	0e 94 6f 00 	call	0xde	; 0xde <task1>
    if (time2==0){ time2=t2; task2();}
 184:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <time2>
 188:	81 11       	cpse	r24, r1
 18a:	05 c0       	rjmp	.+10     	; 0x196 <main+0x28>
 18c:	8d e7       	ldi	r24, 0x7D	; 125
 18e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <time2>
 192:	0e 94 81 00 	call	0x102	; 0x102 <task2>
    if (time3==0){ time3=t3; task3();}
 196:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <time3>
 19a:	81 11       	cpse	r24, r1
 19c:	ea cf       	rjmp	.-44     	; 0x172 <main+0x4>
 19e:	8c e3       	ldi	r24, 0x3C	; 60
 1a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time3>
 1a4:	0e 94 93 00 	call	0x126	; 0x126 <task3>
 1a8:	e4 cf       	rjmp	.-56     	; 0x172 <main+0x4>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
