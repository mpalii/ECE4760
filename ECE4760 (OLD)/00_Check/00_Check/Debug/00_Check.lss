
00_Check.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071f  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000280  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000377  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
	PORTD ^= 0x01;
}

void task2(void) 
{
	PORTB ^= 0x02;
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a6:	89 2b       	or	r24, r25
  a8:	49 f0       	breq	.+18     	; 0xbc <__vector_14+0x2c>
  aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <task1>:
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	89 27       	eor	r24, r25
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret

000000d4 <initialize>:


void initialize(void)
{
  //set up the ports
  DDRB=0x03;    // PORT B is an output  
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	84 b9       	out	0x04, r24	; 4
  DDRD=0x01;	// PORT D is an input 
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	9a b9       	out	0x0a, r25	; 10
           
  //set up timer 0 for 1 mSec ticks
  
  TIMSK0 = 2;		//turn on timer 0 cmp match ISR 
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  
  OCR0A = 124;  	//set the compare reg to 250 time ticks
  e2:	2c e7       	ldi	r18, 0x7C	; 124
  e4:	27 bd       	out	0x27, r18	; 39
  
  TCCR0A = 0b00000010; // turn on clear-on-match
  e6:	94 bd       	out	0x24, r25	; 36
  
  TCCR0B = 0b00000011;	// clock prescaler to 64
  e8:	85 bd       	out	0x25, r24	; 37
  // Enable Clear Timer on Compare (CTC) mode
  TCCR1A |= (1 << COM1A1);
  // Enable 16-bit Timer/Counter1 output compare a match interrupt
  TIMSK1 |= (1 << OCIE1A);*/

  time1=t1;
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  time2=t2;
  f6:	84 ef       	ldi	r24, 0xF4	; 244
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time2+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time2>

  sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <main>:
	//if (time2>0) 	--time2;
}  

int main(void)
{  
  initialize();
 106:	0e 94 6a 00 	call	0xd4	; 0xd4 <initialize>
  
  while(1)
  { 
	  
    if (time1==0){ time1=t1; task1(); }
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 112:	89 2b       	or	r24, r25
 114:	d1 f7       	brne	.-12     	; 0x10a <main+0x4>
 116:	88 ee       	ldi	r24, 0xE8	; 232
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 122:	0e 94 65 00 	call	0xca	; 0xca <task1>
 126:	f1 cf       	rjmp	.-30     	; 0x10a <main+0x4>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
