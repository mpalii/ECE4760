
Check644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a6  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c4  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002aa  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_16>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a4 30       	cpi	r26, 0x04	; 4
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 98 00 	call	0x130	; 0x130 <main>
  90:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <__vector_16>:
          
volatile uint16_t time1;
volatile uint16_t time2;
         
ISR (TIMER0_COMPA_vect)
{      
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  if (time1 > 1) --time1;
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ae:	02 97       	sbiw	r24, 0x02	; 2
  b0:	48 f0       	brcs	.+18     	; 0xc4 <__vector_16+0x2c>
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  if (time2 > 1) --time2;
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time2>
  c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time2+0x1>
  cc:	02 97       	sbiw	r24, 0x02	; 2
  ce:	48 f0       	brcs	.+18     	; 0xe2 <__vector_16+0x4a>
  d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time2>
  d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time2+0x1>
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time2+0x1>
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time2>
}  
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <task1>:
}
  
//Task 1
void task1(void) 
{  
	PORTD ^= (1 << PD0);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 27       	eor	r24, r25
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	08 95       	ret

000000fa <task2>:
}
 
//Task 2  
void task2(void) 
{
	PORTD ^= (1 << PD1);
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	89 27       	eor	r24, r25
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <initialize>:

//Set it all up
void initialize(void)
{
	//set up port D as output
	DDRD=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a b9       	out	0x0a, r24	; 10
       
	//set up timer 0 for 1 mSec timebase 
	TIMSK0= (1<<OCIE0A);			//turn on timer 0 cmp match ISR 
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f006e>
	OCR0A =	249;  					//set the compare reg to 250 time ticks
 10e:	99 ef       	ldi	r25, 0xF9	; 249
 110:	97 bd       	out	0x27, r25	; 39
	// turn on clear-on-match
	TCCR0A= (1<<WGM01);
 112:	84 bd       	out	0x24, r24	; 36
	//set pre-scaler to divide by 64 
	TCCR0B= 0b00000011; 	
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	85 bd       	out	0x25, r24	; 37

	
	time1 = t1;
 118:	85 ef       	ldi	r24, 0xF5	; 245
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	time2 = t2;
 124:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time2+0x1>
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time2>
  
	sei();
 12c:	78 94       	sei
 12e:	08 95       	ret

00000130 <main>:
  if (time2 > 1) --time2;
}  

int main(void)
{  
	initialize();
 130:	0e 94 82 00 	call	0x104	; 0x104 <initialize>

	while(1)
	{   
		if (time1==1){ time1=t1; task1();}
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	41 f4       	brne	.+16     	; 0x150 <main+0x20>
 140:	85 ef       	ldi	r24, 0xF5	; 245
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	0e 94 78 00 	call	0xf0	; 0xf0 <task1>
		if (time2==1){ time2=t2; task2();}
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time2>
 154:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time2+0x1>
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	61 f7       	brne	.-40     	; 0x134 <main+0x4>
 15c:	85 ef       	ldi	r24, 0xF5	; 245
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time2+0x1>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time2>
 168:	0e 94 7d 00 	call	0xfa	; 0xfa <task2>
 16c:	e3 cf       	rjmp	.-58     	; 0x134 <main+0x4>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
