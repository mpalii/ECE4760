
04_UART_async.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800110  00800110  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000781  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000359  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d8  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#include <avr/interrupt.h>
#include <stdbool.h>
#include "uart328p.h"

ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	UART_recieve();
  c8:	0e 94 88 00 	call	0x110	; 0x110 <UART_recieve>
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <main>:

int main(void)
{
    UART_init(F_CPU, 9600, false);
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	20 e8       	ldi	r18, 0x80	; 128
  f2:	35 e2       	ldi	r19, 0x25	; 37
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	72 e1       	ldi	r23, 0x12	; 18
  fc:	8a e7       	ldi	r24, 0x7A	; 122
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 ba 00 	call	0x174	; 0x174 <UART_init>
	sei();
 104:	78 94       	sei
	UART_transmit_string("Start up...\n\r");
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_transmit_string>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x20>

00000110 <UART_recieve>:
}

char* UART_get_rx_data()
{
	return (rx_allowed) ? NULL : input_buffer;
}
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	88 23       	and	r24, r24
 116:	69 f1       	breq	.+90     	; 0x172 <UART_recieve+0x62>
 118:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 120:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 124:	29 30       	cpi	r18, 0x09	; 9
 126:	31 05       	cpc	r19, r1
 128:	24 f0       	brlt	.+8      	; 0x132 <UART_recieve+0x22>
 12a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 12e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 132:	8a 30       	cpi	r24, 0x0A	; 10
 134:	11 f0       	breq	.+4      	; 0x13a <UART_recieve+0x2a>
 136:	8d 30       	cpi	r24, 0x0D	; 13
 138:	71 f4       	brne	.+28     	; 0x156 <UART_recieve+0x46>
 13a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 13e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 142:	ee 5e       	subi	r30, 0xEE	; 238
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	10 82       	st	Z, r1
 148:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 150:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 154:	08 95       	ret
 156:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 15a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 15e:	f9 01       	movw	r30, r18
 160:	ee 5e       	subi	r30, 0xEE	; 238
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	80 83       	st	Z, r24
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 16e:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
 172:	08 95       	ret

00000174 <UART_init>:
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
 182:	ca 01       	movw	r24, r20
 184:	b9 01       	movw	r22, r18
 186:	00 23       	and	r16, r16
 188:	41 f0       	breq	.+16     	; 0x19a <UART_init+0x26>
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 190:	28 e0       	ldi	r18, 0x08	; 8
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <UART_init+0x2e>
 19a:	20 e1       	ldi	r18, 0x10	; 16
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	0e 94 06 01 	call	0x20c	; 0x20c <__mulsi3>
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	0e 94 16 01 	call	0x22c	; 0x22c <__udivmodsi4>
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	31 09       	sbc	r19, r1
 1b6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ba:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1be:	e1 ec       	ldi	r30, 0xC1	; 193
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	80 83       	st	Z, r24
 1c6:	80 81       	ld	r24, Z
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	80 83       	st	Z, r24
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	08 95       	ret

000001d8 <UART_transmit_byte>:


void UART_transmit_byte(char data)
{
	// Wait for empty transmit buffer
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1dc:	95 ff       	sbrs	r25, 5
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_transmit_byte>
	// Put data into buffer, sends the data
	UDR0 = data;
 1e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1e4:	08 95       	ret

000001e6 <UART_transmit_string>:
}

void UART_transmit_string(char *str)
{
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] != '\0')
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <UART_transmit_string+0x12>
	{
		UART_transmit_byte(str[i]);
 1f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_transmit_byte>
		i++;
 1f6:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_transmit_string(char *str)
{
	uint8_t i = 0;
	while (str[i] != '\0')
 1f8:	f8 01       	movw	r30, r16
 1fa:	ec 0f       	add	r30, r28
 1fc:	f1 1d       	adc	r31, r1
 1fe:	80 81       	ld	r24, Z
 200:	81 11       	cpse	r24, r1
 202:	f7 cf       	rjmp	.-18     	; 0x1f2 <UART_transmit_string+0xc>
	{
		UART_transmit_byte(str[i]);
		i++;
	}
}
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <__mulsi3>:
 20c:	db 01       	movw	r26, r22
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	0e 94 38 01 	call	0x270	; 0x270 <__muluhisi3>
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	a2 9f       	mul	r26, r18
 21c:	80 0d       	add	r24, r0
 21e:	91 1d       	adc	r25, r1
 220:	a3 9f       	mul	r26, r19
 222:	90 0d       	add	r25, r0
 224:	b2 9f       	mul	r27, r18
 226:	90 0d       	add	r25, r0
 228:	11 24       	eor	r1, r1
 22a:	08 95       	ret

0000022c <__udivmodsi4>:
 22c:	a1 e2       	ldi	r26, 0x21	; 33
 22e:	1a 2e       	mov	r1, r26
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	fd 01       	movw	r30, r26
 236:	0d c0       	rjmp	.+26     	; 0x252 <__udivmodsi4_ep>

00000238 <__udivmodsi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	ee 1f       	adc	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	e4 07       	cpc	r30, r20
 246:	f5 07       	cpc	r31, r21
 248:	20 f0       	brcs	.+8      	; 0x252 <__udivmodsi4_ep>
 24a:	a2 1b       	sub	r26, r18
 24c:	b3 0b       	sbc	r27, r19
 24e:	e4 0b       	sbc	r30, r20
 250:	f5 0b       	sbc	r31, r21

00000252 <__udivmodsi4_ep>:
 252:	66 1f       	adc	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	1a 94       	dec	r1
 25c:	69 f7       	brne	.-38     	; 0x238 <__udivmodsi4_loop>
 25e:	60 95       	com	r22
 260:	70 95       	com	r23
 262:	80 95       	com	r24
 264:	90 95       	com	r25
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	bd 01       	movw	r22, r26
 26c:	cf 01       	movw	r24, r30
 26e:	08 95       	ret

00000270 <__muluhisi3>:
 270:	0e 94 43 01 	call	0x286	; 0x286 <__umulhisi3>
 274:	a5 9f       	mul	r26, r21
 276:	90 0d       	add	r25, r0
 278:	b4 9f       	mul	r27, r20
 27a:	90 0d       	add	r25, r0
 27c:	a4 9f       	mul	r26, r20
 27e:	80 0d       	add	r24, r0
 280:	91 1d       	adc	r25, r1
 282:	11 24       	eor	r1, r1
 284:	08 95       	ret

00000286 <__umulhisi3>:
 286:	a2 9f       	mul	r26, r18
 288:	b0 01       	movw	r22, r0
 28a:	b3 9f       	mul	r27, r19
 28c:	c0 01       	movw	r24, r0
 28e:	a3 9f       	mul	r26, r19
 290:	70 0d       	add	r23, r0
 292:	81 1d       	adc	r24, r1
 294:	11 24       	eor	r1, r1
 296:	91 1d       	adc	r25, r1
 298:	b2 9f       	mul	r27, r18
 29a:	70 0d       	add	r23, r0
 29c:	81 1d       	adc	r24, r1
 29e:	11 24       	eor	r1, r1
 2a0:	91 1d       	adc	r25, r1
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
