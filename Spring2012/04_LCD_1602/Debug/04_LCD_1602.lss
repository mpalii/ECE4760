
04_LCD_1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e14  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000485  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042c  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  78:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sendCommand4BitMode>:

#include <avr/io.h>
#include <util/delay.h>

void sendCommand4BitMode(uint8_t command) {
	RS_LOW;
  80:	98 b1       	in	r25, 0x08	; 8
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	98 b9       	out	0x08, r25	; 8
	PORTD = command;
  86:	8b b9       	out	0x0b, r24	; 11
	E_HIGH;
  88:	98 b1       	in	r25, 0x08	; 8
  8a:	92 60       	ori	r25, 0x02	; 2
  8c:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	9c e0       	ldi	r25, 0x0C	; 12
  90:	9a 95       	dec	r25
  92:	f1 f7       	brne	.-4      	; 0x90 <sendCommand4BitMode+0x10>
  94:	00 00       	nop
	_delay_us(37);
	E_LOW;
  96:	98 b1       	in	r25, 0x08	; 8
  98:	9d 7f       	andi	r25, 0xFD	; 253
  9a:	98 b9       	out	0x08, r25	; 8
  9c:	9c e0       	ldi	r25, 0x0C	; 12
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <sendCommand4BitMode+0x1e>
  a2:	00 00       	nop
	_delay_us(37);
	PORTD = command << 4;
  a4:	82 95       	swap	r24
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	8b b9       	out	0x0b, r24	; 11
	E_HIGH;
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	88 b9       	out	0x08, r24	; 8
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <sendCommand4BitMode+0x32>
  b6:	00 00       	nop
	_delay_us(37);
	E_LOW;
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	88 b9       	out	0x08, r24	; 8
  be:	9c e0       	ldi	r25, 0x0C	; 12
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <sendCommand4BitMode+0x40>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <sendCommand8BitMode>:
	_delay_us(37);
}

void sendCommand8BitMode(uint8_t command) {
	RS_LOW;
  c8:	98 b1       	in	r25, 0x08	; 8
  ca:	9e 7f       	andi	r25, 0xFE	; 254
  cc:	98 b9       	out	0x08, r25	; 8
	PORTD = command;
  ce:	8b b9       	out	0x0b, r24	; 11
	E_HIGH;
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	88 b9       	out	0x08, r24	; 8
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <sendCommand8BitMode+0x10>
  dc:	00 00       	nop
	_delay_us(37);
	E_LOW;
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <sendCommand8BitMode+0x1e>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <sendData>:
	_delay_us(37);
}

// First need to send 4 higher bits, and then 4 lower bits
void sendData(uint8_t data) {
	RS_HIGH;
  ee:	98 b1       	in	r25, 0x08	; 8
  f0:	91 60       	ori	r25, 0x01	; 1
  f2:	98 b9       	out	0x08, r25	; 8
	PORTD = data;
  f4:	8b b9       	out	0x0b, r24	; 11
	E_HIGH;
  f6:	98 b1       	in	r25, 0x08	; 8
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	98 b9       	out	0x08, r25	; 8
  fc:	9c e0       	ldi	r25, 0x0C	; 12
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <sendData+0x10>
 102:	00 00       	nop
	_delay_us(37);
	E_LOW;
 104:	98 b1       	in	r25, 0x08	; 8
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	98 b9       	out	0x08, r25	; 8
 10a:	9c e0       	ldi	r25, 0x0C	; 12
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <sendData+0x1e>
 110:	00 00       	nop
	_delay_us(37);
	PORTD = data << 4;
 112:	82 95       	swap	r24
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	8b b9       	out	0x0b, r24	; 11
	E_HIGH;
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <sendData+0x32>
 124:	00 00       	nop
	_delay_us(37);
	E_LOW;
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	9c e0       	ldi	r25, 0x0C	; 12
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <sendData+0x40>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <pinoutSetup1602>:
	_delay_us(37);
}

// LCD pin out config
void pinoutSetup1602(void) {
	DDRC |= (1 << PC0) | (1 << PC1);							// Control bus
 136:	87 b1       	in	r24, 0x07	; 7
 138:	83 60       	ori	r24, 0x03	; 3
 13a:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);	// Data bus
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 6f       	ori	r24, 0xF0	; 240
 140:	8a b9       	out	0x0a, r24	; 10
 142:	08 95       	ret

00000144 <init4BitMode>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	87 ea       	ldi	r24, 0xA7	; 167
 146:	91 e6       	ldi	r25, 0x61	; 97
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <init4BitMode+0x4>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <init4BitMode+0xa>
 14e:	00 00       	nop
}

// 4bit mode initialization
void init4BitMode(void) {
	_delay_ms(100);
	sendCommand8BitMode(0b00110000);	// Special case of 'Function Set'
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	0e 94 64 00 	call	0xc8	; 0xc8 <sendCommand8BitMode>
 156:	81 ee       	ldi	r24, 0xE1	; 225
 158:	94 e0       	ldi	r25, 0x04	; 4
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <init4BitMode+0x16>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <init4BitMode+0x1c>
 160:	00 00       	nop
	_delay_ms(5);
	sendCommand8BitMode(0b00110000);	// Special case of 'Function Set'
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	0e 94 64 00 	call	0xc8	; 0xc8 <sendCommand8BitMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	91 e2       	ldi	r25, 0x21	; 33
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <init4BitMode+0x26>
 16e:	00 00       	nop
	_delay_us(100);
	sendCommand8BitMode(0b00110000);	// Special case of 'Function Set'
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	0e 94 64 00 	call	0xc8	; 0xc8 <sendCommand8BitMode>
 176:	81 e2       	ldi	r24, 0x21	; 33
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <init4BitMode+0x34>
 17c:	00 00       	nop
	
	_delay_us(100);
	sendCommand8BitMode(0b00100000);	// Initial 'Function Set' - 4bit mode
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <sendCommand8BitMode>
 184:	91 e2       	ldi	r25, 0x21	; 33
 186:	9a 95       	dec	r25
 188:	f1 f7       	brne	.-4      	; 0x186 <init4BitMode+0x42>
 18a:	00 00       	nop
	_delay_us(100);
	sendCommand4BitMode(0b00101000);	// Real 'Function Set' - 4bit mode, 2 lines, 5x8 font
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	0e 94 40 00 	call	0x80	; 0x80 <sendCommand4BitMode>
 192:	81 e1       	ldi	r24, 0x11	; 17
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <init4BitMode+0x50>
 198:	00 c0       	rjmp	.+0      	; 0x19a <init4BitMode+0x56>
	_delay_us(53);
	sendCommand4BitMode(0b00001100);	// 'Display ON/OFF Control' display on, cursor off and not blink
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	0e 94 40 00 	call	0x80	; 0x80 <sendCommand4BitMode>
 1a0:	91 e1       	ldi	r25, 0x11	; 17
 1a2:	9a 95       	dec	r25
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <init4BitMode+0x5e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <init4BitMode+0x64>
	_delay_us(53);
	sendCommand4BitMode(0b00000001);	// 'Clear Display'
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 40 00 	call	0x80	; 0x80 <sendCommand4BitMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	8d ee       	ldi	r24, 0xED	; 237
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <init4BitMode+0x6e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <init4BitMode+0x74>
 1b8:	00 00       	nop
	_delay_ms(3);
	sendCommand4BitMode(0b00000110);	// 'Entry Mode Set' cursor shift to right
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	0e 94 40 00 	call	0x80	; 0x80 <sendCommand4BitMode>
 1c0:	81 ec       	ldi	r24, 0xC1	; 193
 1c2:	93 e3       	ldi	r25, 0x33	; 51
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <init4BitMode+0x80>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <init4BitMode+0x86>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <main>:
	_delay_ms(53);
}

int main(void)
{
	pinoutSetup1602();
 1ce:	0e 94 9b 00 	call	0x136	; 0x136 <pinoutSetup1602>
	init4BitMode();
 1d2:	0e 94 a2 00 	call	0x144	; 0x144 <init4BitMode>
	
	sendData('L');
 1d6:	8c e4       	ldi	r24, 0x4C	; 76
 1d8:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('C');
 1dc:	83 e4       	ldi	r24, 0x43	; 67
 1de:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('D');
 1e2:	84 e4       	ldi	r24, 0x44	; 68
 1e4:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData(' ');
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('1');
 1ee:	81 e3       	ldi	r24, 0x31	; 49
 1f0:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('6');
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('0');
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('2');
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	
	sendCommand4BitMode(0xC0);
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	0e 94 40 00 	call	0x80	; 0x80 <sendCommand4BitMode>
	
	sendData('4');
 20c:	84 e3       	ldi	r24, 0x34	; 52
 20e:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('-');
 212:	8d e2       	ldi	r24, 0x2D	; 45
 214:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('b');
 218:	82 e6       	ldi	r24, 0x62	; 98
 21a:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('i');
 21e:	89 e6       	ldi	r24, 0x69	; 105
 220:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('t');
 224:	84 e7       	ldi	r24, 0x74	; 116
 226:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData(' ');
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('m');
 230:	8d e6       	ldi	r24, 0x6D	; 109
 232:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('o');
 236:	8f e6       	ldi	r24, 0x6F	; 111
 238:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('d');
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	0e 94 77 00 	call	0xee	; 0xee <sendData>
	sendData('e');
 242:	85 e6       	ldi	r24, 0x65	; 101
 244:	0e 94 77 00 	call	0xee	; 0xee <sendData>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0x7a>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
