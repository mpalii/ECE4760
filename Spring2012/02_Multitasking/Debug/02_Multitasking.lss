
02_Multitasking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f3  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bb  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

bool button_was_pressed = false;
bool double_speed_enabled = false;

ISR (TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	if (time1 > 0) --time1;
  9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
  a0:	88 23       	and	r24, r24
  a2:	29 f0       	breq	.+10     	; 0xae <__vector_14+0x1e>
  a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
	if (time2 > 0) --time2;
  ae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time2>
  b2:	88 23       	and	r24, r24
  b4:	29 f0       	breq	.+10     	; 0xc0 <__vector_14+0x30>
  b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time2>
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time2>
	if (time3 > 0) --time3;
  c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time3>
  c4:	88 23       	and	r24, r24
  c6:	29 f0       	breq	.+10     	; 0xd2 <__vector_14+0x42>
  c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time3>
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time3>
	if (time4 > 0) --time4;
  d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time4>
  d6:	88 23       	and	r24, r24
  d8:	29 f0       	breq	.+10     	; 0xe4 <__vector_14+0x54>
  da:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time4>
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time4>
}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <init_io_pins>:


void init_io_pins(void)
{
	// Set port D pin 0, 1 and 2 as output
	DDRD |= _BV(DDD0) | _BV(DDD1) | _BV(DDD2);
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	8a b9       	out	0x0a, r24	; 10
	// Enable internal pull-up resistor pin 3 (port D)
	PORTD |= _BV(DDD3);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	08 95       	ret

000000fe <init_tasks>:
}

void init_tasks(void)
{
	time1 = T1;
  fe:	8a ef       	ldi	r24, 0xFA	; 250
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
	time2 = T2;
 104:	84 e6       	ldi	r24, 0x64	; 100
 106:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time2>
	time3 = T3;
 10a:	84 e1       	ldi	r24, 0x14	; 20
 10c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time3>
	time4 = T4;
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time4>
 116:	08 95       	ret

00000118 <init_timer_0>:
/* (64 (prescaler) * 125 (OCR0A + 1)) / 8_000_000 MHz = 0.001Sec = 1mSec	*/
/****************************************************************************/
void init_timer_0(void)
{	
	// TCCR0A – Timer/Counter0 Control Register channel A
	TCCR0A = _BV(WGM01);				// Clear Timer on Compare Match (CTC) mode (only works with channel)
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	84 bd       	out	0x24, r24	; 36
	
	// TCCR0B – Timer/Counter0 Control Register channel B
	TCCR0B = _BV(CS01) | _BV(CS00);		// clk/64 (From prescaler)
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	95 bd       	out	0x25, r25	; 37
	
	// OCR0A – Timer/Counter0 Output Compare Register channel A
	OCR0A =	124;  						//set the compare reg to 125 time ticks (zero based)
 120:	9c e7       	ldi	r25, 0x7C	; 124
 122:	97 bd       	out	0x27, r25	; 39
	
	// TIMSK0 – Timer/Counter0 Interrupt Mask Register
	TIMSK0 = _BV(OCIE0A);				// Timer/Counter0 Output Compare Match channel A Interrupt Enable
 124:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 128:	08 95       	ret

0000012a <task_1>:
// Tasks implementation section

void task_1(void)
{
	// re-initialize task 1 timer
	time1 = T1;
 12a:	8a ef       	ldi	r24, 0xFA	; 250
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time1>
	// Toggle pin 0 port D
	PORTD ^= _BV(PORTD0);
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 27       	eor	r24, r25
 136:	8b b9       	out	0x0b, r24	; 11
 138:	08 95       	ret

0000013a <task_2>:
}

void task_2(void)
{
	// re-initialize task 2 timer
	time2 = T2;
 13a:	84 e6       	ldi	r24, 0x64	; 100
 13c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time2>
	// Toggle pin 1 port D
	PORTD ^= _BV(PORTD1);
 140:	9b b1       	in	r25, 0x0b	; 11
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	89 27       	eor	r24, r25
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret

0000014a <task_3>:
}

void task_3(void)
{
	// re-initialize task 3 timer
	time3 = double_speed_enabled ? (T3 / 2) : T3;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	88 23       	and	r24, r24
 150:	11 f0       	breq	.+4      	; 0x156 <task_3+0xc>
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	01 c0       	rjmp	.+2      	; 0x158 <task_3+0xe>
 156:	84 e1       	ldi	r24, 0x14	; 20
 158:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time3>
	// Toggle pin 2 port D
	PORTD ^= _BV(PORTD2);
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	89 27       	eor	r24, r25
 162:	8b b9       	out	0x0b, r24	; 11
 164:	08 95       	ret

00000166 <task_4>:
}

void task_4(void)
{
	// re-initialize task 4 timer
	time4 = T4;
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time4>
	// Button handling
	// check whether button was pressed
	if (bit_is_clear(PIND, PIND3) && !button_was_pressed)
 16c:	4b 99       	sbic	0x09, 3	; 9
 16e:	0e c0       	rjmp	.+28     	; 0x18c <task_4+0x26>
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_was_pressed>
 174:	81 11       	cpse	r24, r1
 176:	0a c0       	rjmp	.+20     	; 0x18c <task_4+0x26>
	{
		button_was_pressed = true;
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <button_was_pressed>
		// button push handling
		double_speed_enabled = double_speed_enabled ? false : true;
 17e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	91 11       	cpse	r25, r1
 184:	01 c0       	rjmp	.+2      	; 0x188 <task_4+0x22>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	// check whether button was released
	if (bit_is_set(PIND, PIND3) && button_was_pressed)
 18c:	4b 9b       	sbis	0x09, 3	; 9
 18e:	05 c0       	rjmp	.+10     	; 0x19a <task_4+0x34>
 190:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_was_pressed>
 194:	81 11       	cpse	r24, r1
	{
		button_was_pressed = false;
 196:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <button_was_pressed>
 19a:	08 95       	ret

0000019c <main>:
	if (time4 > 0) --time4;
}

int main(void)
{
	init_io_pins();
 19c:	0e 94 78 00 	call	0xf0	; 0xf0 <init_io_pins>
	init_tasks();
 1a0:	0e 94 7f 00 	call	0xfe	; 0xfe <init_tasks>
	init_timer_0();
 1a4:	0e 94 8c 00 	call	0x118	; 0x118 <init_timer_0>
	sei();
 1a8:	78 94       	sei
	
    while (true) 
	{
		if (time1 == 0) { task_1(); }
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time1>
 1ae:	81 11       	cpse	r24, r1
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <main+0x1a>
 1b2:	0e 94 95 00 	call	0x12a	; 0x12a <task_1>
		if (time2 == 0) { task_2(); }
 1b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time2>
 1ba:	81 11       	cpse	r24, r1
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x26>
 1be:	0e 94 9d 00 	call	0x13a	; 0x13a <task_2>
		if (time3 == 0) { task_3(); }
 1c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time3>
 1c6:	81 11       	cpse	r24, r1
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0x32>
 1ca:	0e 94 a5 00 	call	0x14a	; 0x14a <task_3>
		if (time4 == 0) { task_4(); }
 1ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time4>
 1d2:	81 11       	cpse	r24, r1
 1d4:	ea cf       	rjmp	.-44     	; 0x1aa <main+0xe>
 1d6:	0e 94 b3 00 	call	0x166	; 0x166 <task_4>
 1da:	e7 cf       	rjmp	.-50     	; 0x1aa <main+0xe>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
